// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: noaa_severity/v1/notify_severity.proto

package noaa_severityv1connect

import (
	context "context"
	errors "errors"
	v1 "federation_orchestrator/rpc/gen/noaa_severity/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// NotifySeverityServiceName is the fully-qualified name of the NotifySeverityService service.
	NotifySeverityServiceName = "noaa_severity.v1.NotifySeverityService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotifySeverityServiceNotifySeverityProcedure is the fully-qualified name of the
	// NotifySeverityService's NotifySeverity RPC.
	NotifySeverityServiceNotifySeverityProcedure = "/noaa_severity.v1.NotifySeverityService/NotifySeverity"
)

// NotifySeverityServiceClient is a client for the noaa_severity.v1.NotifySeverityService service.
type NotifySeverityServiceClient interface {
	NotifySeverity(context.Context, *connect_go.Request[v1.NotifySeverityRequest]) (*connect_go.Response[v1.NotifySeverityResponse], error)
}

// NewNotifySeverityServiceClient constructs a client for the noaa_severity.v1.NotifySeverityService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotifySeverityServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NotifySeverityServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notifySeverityServiceClient{
		notifySeverity: connect_go.NewClient[v1.NotifySeverityRequest, v1.NotifySeverityResponse](
			httpClient,
			baseURL+NotifySeverityServiceNotifySeverityProcedure,
			opts...,
		),
	}
}

// notifySeverityServiceClient implements NotifySeverityServiceClient.
type notifySeverityServiceClient struct {
	notifySeverity *connect_go.Client[v1.NotifySeverityRequest, v1.NotifySeverityResponse]
}

// NotifySeverity calls noaa_severity.v1.NotifySeverityService.NotifySeverity.
func (c *notifySeverityServiceClient) NotifySeverity(ctx context.Context, req *connect_go.Request[v1.NotifySeverityRequest]) (*connect_go.Response[v1.NotifySeverityResponse], error) {
	return c.notifySeverity.CallUnary(ctx, req)
}

// NotifySeverityServiceHandler is an implementation of the noaa_severity.v1.NotifySeverityService
// service.
type NotifySeverityServiceHandler interface {
	NotifySeverity(context.Context, *connect_go.Request[v1.NotifySeverityRequest]) (*connect_go.Response[v1.NotifySeverityResponse], error)
}

// NewNotifySeverityServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotifySeverityServiceHandler(svc NotifySeverityServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	notifySeverityServiceNotifySeverityHandler := connect_go.NewUnaryHandler(
		NotifySeverityServiceNotifySeverityProcedure,
		svc.NotifySeverity,
		opts...,
	)
	return "/noaa_severity.v1.NotifySeverityService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotifySeverityServiceNotifySeverityProcedure:
			notifySeverityServiceNotifySeverityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotifySeverityServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotifySeverityServiceHandler struct{}

func (UnimplementedNotifySeverityServiceHandler) NotifySeverity(context.Context, *connect_go.Request[v1.NotifySeverityRequest]) (*connect_go.Response[v1.NotifySeverityResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("noaa_severity.v1.NotifySeverityService.NotifySeverity is not implemented"))
}
